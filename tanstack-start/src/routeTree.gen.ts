/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PostsRouteImport } from './routes/posts'
import { Route as PlaygroundRouteImport } from './routes/playground'
import { Route as MiddlewareRouteImport } from './routes/middleware'
import { Route as HydrationMismatchesRouteImport } from './routes/hydration-mismatches'
import { Route as GoogleRouteImport } from './routes/google'
import { Route as ErrorBoundaryRouteImport } from './routes/error-boundary'
import { Route as SplatRouteImport } from './routes/$'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PostsPostIdRouteImport } from './routes/posts.$postId'
import { Route as ApiDemoNamesRouteImport } from './routes/api.demo-names'
import { Route as DemoStartServerFuncsRouteImport } from './routes/demo.start.server-funcs'
import { Route as DemoStartApiRequestRouteImport } from './routes/demo.start.api-request'

const PostsRoute = PostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaygroundRoute = PlaygroundRouteImport.update({
  id: '/playground',
  path: '/playground',
  getParentRoute: () => rootRouteImport,
} as any)
const MiddlewareRoute = MiddlewareRouteImport.update({
  id: '/middleware',
  path: '/middleware',
  getParentRoute: () => rootRouteImport,
} as any)
const HydrationMismatchesRoute = HydrationMismatchesRouteImport.update({
  id: '/hydration-mismatches',
  path: '/hydration-mismatches',
  getParentRoute: () => rootRouteImport,
} as any)
const GoogleRoute = GoogleRouteImport.update({
  id: '/google',
  path: '/google',
  getParentRoute: () => rootRouteImport,
} as any)
const ErrorBoundaryRoute = ErrorBoundaryRouteImport.update({
  id: '/error-boundary',
  path: '/error-boundary',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsPostIdRoute = PostsPostIdRouteImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRoute,
} as any)
const ApiDemoNamesRoute = ApiDemoNamesRouteImport.update({
  id: '/api/demo-names',
  path: '/api/demo-names',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartServerFuncsRoute = DemoStartServerFuncsRouteImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartApiRequestRoute = DemoStartApiRequestRouteImport.update({
  id: '/demo/start/api-request',
  path: '/demo/start/api-request',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/error-boundary': typeof ErrorBoundaryRoute
  '/google': typeof GoogleRoute
  '/hydration-mismatches': typeof HydrationMismatchesRoute
  '/middleware': typeof MiddlewareRoute
  '/playground': typeof PlaygroundRoute
  '/posts': typeof PostsRouteWithChildren
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/error-boundary': typeof ErrorBoundaryRoute
  '/google': typeof GoogleRoute
  '/hydration-mismatches': typeof HydrationMismatchesRoute
  '/middleware': typeof MiddlewareRoute
  '/playground': typeof PlaygroundRoute
  '/posts': typeof PostsRouteWithChildren
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/error-boundary': typeof ErrorBoundaryRoute
  '/google': typeof GoogleRoute
  '/hydration-mismatches': typeof HydrationMismatchesRoute
  '/middleware': typeof MiddlewareRoute
  '/playground': typeof PlaygroundRoute
  '/posts': typeof PostsRouteWithChildren
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/error-boundary'
    | '/google'
    | '/hydration-mismatches'
    | '/middleware'
    | '/playground'
    | '/posts'
    | '/api/demo-names'
    | '/posts/$postId'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/error-boundary'
    | '/google'
    | '/hydration-mismatches'
    | '/middleware'
    | '/playground'
    | '/posts'
    | '/api/demo-names'
    | '/posts/$postId'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  id:
    | '__root__'
    | '/'
    | '/$'
    | '/error-boundary'
    | '/google'
    | '/hydration-mismatches'
    | '/middleware'
    | '/playground'
    | '/posts'
    | '/api/demo-names'
    | '/posts/$postId'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  ErrorBoundaryRoute: typeof ErrorBoundaryRoute
  GoogleRoute: typeof GoogleRoute
  HydrationMismatchesRoute: typeof HydrationMismatchesRoute
  MiddlewareRoute: typeof MiddlewareRoute
  PlaygroundRoute: typeof PlaygroundRoute
  PostsRoute: typeof PostsRouteWithChildren
  ApiDemoNamesRoute: typeof ApiDemoNamesRoute
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playground': {
      id: '/playground'
      path: '/playground'
      fullPath: '/playground'
      preLoaderRoute: typeof PlaygroundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/middleware': {
      id: '/middleware'
      path: '/middleware'
      fullPath: '/middleware'
      preLoaderRoute: typeof MiddlewareRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/hydration-mismatches': {
      id: '/hydration-mismatches'
      path: '/hydration-mismatches'
      fullPath: '/hydration-mismatches'
      preLoaderRoute: typeof HydrationMismatchesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/google': {
      id: '/google'
      path: '/google'
      fullPath: '/google'
      preLoaderRoute: typeof GoogleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/error-boundary': {
      id: '/error-boundary'
      path: '/error-boundary'
      fullPath: '/error-boundary'
      preLoaderRoute: typeof ErrorBoundaryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdRouteImport
      parentRoute: typeof PostsRoute
    }
    '/api/demo-names': {
      id: '/api/demo-names'
      path: '/api/demo-names'
      fullPath: '/api/demo-names'
      preLoaderRoute: typeof ApiDemoNamesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/demo/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface PostsRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  ErrorBoundaryRoute: ErrorBoundaryRoute,
  GoogleRoute: GoogleRoute,
  HydrationMismatchesRoute: HydrationMismatchesRoute,
  MiddlewareRoute: MiddlewareRoute,
  PlaygroundRoute: PlaygroundRoute,
  PostsRoute: PostsRouteWithChildren,
  ApiDemoNamesRoute: ApiDemoNamesRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.ts'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
